
# ----------------------------------------
# standard alpine plugins that appear to be missing their command defs...

# 'check_disk_smb_host_user' command definition
define command{
        command_name    check_disk_smb_host_user
        command_line    $USER1/check_disk_smb -a '$HOSTADDRESS$' -H '$ARG1$' -s '$ARG2$' -u '$ARG3$' -p '$ARG4$'
        }

# return-ok definition
define command {
        command_name    return-ok
        command_line    /usr/lib/nagios/plugins/check_dummy 0
}

# 'check_dns' command definition
define command{
        command_name    check_dns
        command_line    /usr/lib/nagios/plugins/check_dns -H www.google.com -s '$HOSTADDRESS$'
}

# ----------------------------------------
# kds unique checks

# kds: healthz check
define command {
	command_name	check_healthz
	command_line	$USER1$/check_healthz $HOSTADDRESS$
}

define command {
	command_name	check_healthz_port
	command_line	$USER1$/check_healthz $HOSTADDRESS$ '$ARG1$'
}

define command {
	command_name	check_https_healthz_port
	command_line	$USER1$/check_healthz --ssl $HOSTADDRESS$ '$ARG1$'
}

# Args are port, url
define command {
       command_name	check_https_healthz_custom
       command_line	$USER1$/check_healthz --ssl $HOSTADDRESS$ '$ARG1$' '$ARG2$'
}

# ----------------------------------------
# kds specialized checks

# kds: check url that requires a login
define command{
	command_name	check_http_denied
	command_line	$USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -e "401 Unauthorized"
	}

# kds: check url that requires a login on an alternate port
define command{
	command_name	check_http_denied_port
	command_line	$USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -p '$ARG1$' -e "401 Unauthorized"
	}

# kds: check url that returns a 404 page
define command{
	command_name	check_http_404
	command_line	$USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -e "404 Not Found"
	}

# kds: check web server on alt port
define command{
	command_name	check_http_port
	command_line	$USER1$/check_http -H '$HOSTADDRESS$' -I '$HOSTADDRESS$' -p '$ARG1$'
	}

# kds: check custom port and result string
define command{
       command_name	check_http_custom
       command_line	$USER1$/check_http -H $HOSTADDRESS$ -I $HOSTADDRESS$ -p '$ARG1$' -u '$ARG2$' -s '$ARG3$'
       }

# kds: same as above, but use my curl script, rather than check_http, which seems flaky when talking to a Pyhton HTTPServer
# arg1 is what to expect
# remaining args are passed to curl (i.e. what & how to retrieve)
define command{
       command_name	check_http_curl_expect
       command_line	$USER1$/check_http_curl_expect '$ARG1$' '$ARG2$' '$ARG3$' '$ARG4$' '$ARG5$' '$ARG6$' '$ARG7$' 'y$ARG8$'
       }


# 'check_https' command definition
define command{
        command_name    check_https
        command_line    $USER1$/check_http --ssl -H '$HOSTADDRESS$' -I '$HOSTADDRESS$'
        }

define command{
       command_name	check_https_custom
       command_line	$USER1$/check_http --ssl -H '$HOSTADDRESS$' -I '$HOSTADDRESS$' -p '$ARG1$' -u '$ARG2$' -s '$ARG3$' -e '$ARG4$' -4
       }

# kds 'check_smtp' command definition; with alt port
define command {
	command_name	check_smtp_port
	command_line	$USER1$/check_smtp -H '$HOSTADDRESS$' -p '$ARG1$'
}

define command {
       command_name     check_ssh_kds
       command_line     $USER1$/check_ssh -p '$ARG1$' -t '$ARG2$' '$HOSTADDRESS$'
}

# note- send queries to jack for docker-proxy forwarded port there.
define command {
        command_name    check_sambadock
        command_line    /usr/lib/nagios/plugins/check_disk_smb -a jack -H sambadock -s ken-home -u ken -p ken123
}
