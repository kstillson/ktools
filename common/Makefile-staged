
# This file is designed to be included by Makefiles in the subdirectories.
#
# Supported meta-targets:  staged_all, staged_clean, staged_test, staged_install, staged_uninstall, staged_update
#
# Note: the "test" target is incomplete.  The caller is expected to provide
# a target for $(TEST_LOG), which isn't easily generalizable here.

# Non-standard targets:
# comp: compares files in the staging directories to the install directories
# update: all, test, install, then git commit, remote pull, and remote push.

# ----------------------------------------

# Input variables: at least one of these must be set, if you want the Makefile to do anything.
# PY and SH targets should be specified without their extensions.  They'll be copied to the
# staging directory with the extensions removed.  Plain targets are just copied to staging.
# Custom targets need their own rules specified in the calling Makefile.
PY_TARGETS ?=
SH_TARGETS ?=
PLAIN_TARGETS ?=
CUSTOM_TARGETS ?=

# Control variables: optionally specified by the calling Makefile or
# in the environment, to override the defaults.
STAGING_DIR ?= staging
TEST_LOG ?= $(STAGING_DIR)/test.log
INSTALL_DIR ?= /root/bin
GIT_BRANCH ?= master

# ----------------------------------------
# Internal variables created from the inputs.

SHELL := /bin/bash

# Output variables: each of the target types, but in the staging directory.
STAGING_PY_TARGETS := $(patsubst %,$(STAGING_DIR)/%,$(PY_TARGETS))
STAGING_SH_TARGETS := $(patsubst %,$(STAGING_DIR)/%,$(SH_TARGETS))
STAGING_PLAIN_TARGETS := $(patsubst %,$(STAGING_DIR)/%,$(PLAIN_TARGETS))
STAGING_CUSTOM_TARGETS := $(patsubst %,$(STAGING_DIR)/%,$(CUSTOM_TARGETS))

# Output variables: overall targets, plain, and in staging and target dirs.
TARGETS := $(PY_TARGETS) $(SH_TARGETS) $(PLAIN_TARGETS) $(CUSTOM_TARGETS)
STAGING_TARGETS := $(patsubst %,$(STAGING_DIR)/%,$(TARGETS))
INSTALL_TARGETS := $(patsubst %,$(INSTALL_DIR)/%,$(TARGETS))

INSTALL_MP := $(shell findmnt -n -o TARGET --target $(INSTALL_DIR))

# ----------------------------------------
# Default target

staged_all: $(STAGING_TARGETS)

# ----------------------------------------
# Common rule patterns

# Pattern to create versions in the staging dir without the .py extension.
$(STAGING_PY_TARGETS): $(STAGING_DIR)/%: %.py
	install -D $^ $@

# Pattern to create versions in the staging dir without the .py extension.
$(STAGING_SH_TARGETS): $(STAGING_DIR)/%: %.sh
	install -D $^ $@

# Pattern to create copies of plain files in the staging area.
$(STAGING_PLAIN_TARGETS): $(STAGING_DIR)/%: %
	install -D $^ $@

# TEST_LOG targets should depend on staging dir for output storage.
$(STAGING_DIR):
	mkdir -p $(STAGING_DIR)

# ----------------------------------------
# standard targets

staged_clean:
	rm -rf $(STAGING_DIR) __pycache__ .pytest_cache *.pyc

staged_install: $(INSTALL_TARGETS)

$(INSTALL_TARGETS): $(STAGING_TARGETS)
	if [ -w ${INSTALL_DIR} ]; then \
	  install $^ ${INSTALL_DIR}; \
	else \
	  mount -o remount,rw $(INSTALL_MP) ; \
	  install $^ ${INSTALL_DIR} ; \
	  mount -o remount,ro $(INSTALL_MP) ; \
	fi

staged_uninstall:
	rm $(INSTALL_TARGETS)

# Calling Makefile needs to provide a recipe for $(TEST_LOG)
staged_test: $(TEST_LOG)


# ----------------------------------------
# custom targets

staged_update: $(STAGING_TARGETS)
	$(MAKE) all
	$(MAKE) test
	$(MAKE) install
	$(MAKE) clean

staged_comp: $(STAGING_TARGETS) FORCE
	@for t in $(TARGETS); do diff -s "$(STAGING_DIR)/$$t" "$(INSTALL_DIR)/$$t" | sed -e "/identical/s/.*/ok: $$t/"; done

FORCE: ;
