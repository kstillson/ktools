#!/usr/bin/python3

# SITE-SPECIFIC: The details of this test are site-specific.
#
# - Various paths to your local Docker volumes and your remote storage
#   will have to be updated to match your specifics.  Seek the following:
#   - variables in this file: TEST_FILE_IN, TEST_FILE_OUT
#   - paths in settings-test.yaml
#   - paths in files/etc/init, in the section for "test)"
#
# - In addition, you'll need a files/root/.config/rclone/private.d/rclone.conf
#   whose decryption key (if used) can be obtained by files/etc/auth, and
#   where the name of the repository matches between the rclone config and
#   the "test)" section of files/etc/init.


import argparse, os, subprocess, sys, time

sys.path.append('/root/bin')
import kcore.docker_lib as D

TEST_FILE_OUT = '/rw/mnt/rsnap/echo-back/test-out'
TEST_FILE_IN = '/rw/mnt/rsnap/echo-back/test-in/test-out'

def comp_file(filename, expected_contents):
    if not os.path.isfile(filename): return False
    with open(filename) as f: contents = f.read()
    return expected_contents == contents


def main():
    ap = argparse.ArgumentParser(description='rclonedock test')
    D.add_testing_args(ap)
    args = ap.parse_args()
    
    cookie = D.gen_random_cookie()
    with open(TEST_FILE_OUT, 'w') as f: f.write(cookie)
    os.chmod(TEST_FILE_OUT, 0o644)
    os.chown(TEST_FILE_OUT, 200000, 200000)

    name, ip, cow, dv = D.launch_or_find_container(args, ['--settings', 'settings-test.yaml'])
    if not cow or not ip: sys.exit('cannot find container %s' % name)

    D.emit('starting wait for %s to match %s' % (TEST_FILE_IN, cookie))
    for i in range(10):
        if comp_file(TEST_FILE_IN, cookie):
            print('pass')
            sys.exit(0)
        sys.stderr.write('.')
        time.sleep(2)

    sys.exit('unable to find matching contents :-(')

if __name__ == "__main__":
  main()

