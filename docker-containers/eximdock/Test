#!/usr/bin/python3

# TODO: dependent on Ken-specific config

import argparse, socket, sys, time

sys.path.append('/root/bin')
import kcore.docker_lib as D


def send_email(cookie, ip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, 2525))
    D.emit('SMTP greeting: %s' % sock.recv(1024))
    resp = D.socket_exchange(
        sock,
        ['HELO point0.net', 'MAIL FROM: tech@point0.net',
         'RCPT TO: root@point0.net', 'DATA', 
         'email test cookie %s\n.\n' % cookie, 'QUIT'], 
        add_eol=True, emit_transcript=True)
    sock.close()
    D.emit('SMTP responses: %s' % resp)
        

def main():
    ap = argparse.ArgumentParser(description='eximdock test')
    D.add_testing_args(ap)
    args = ap.parse_args()
    name, ip, cow, dv = D.launch_or_find_container(args)
    if not cow or not ip: sys.exit('cannot find container %s' % name)

    D.emit('sending test email')
    cookie = D.gen_random_cookie()
    try: send_email(cookie, ip)
    except Exception as e: sys.exit('unable to send email: %s' % e)

    time.sleep(5)
    prefix = dv + ('/' if args.prod else '/_rw_dv_eximdock_')
    D.file_expect('Completed', prefix + 'var_log/exim/mainlog')
    D.file_expect('error', prefix + 'var_log/exim/mainlog', invert=True)
    D.file_expect('denied', prefix + 'var_log/exim/mainlog', invert=True)
    D.file_expect('Frozen', prefix + 'var_log/exim/mainlog', invert=True)
    D.file_expect(None, prefix + 'var_log/exim/paniclog', missing_ok=True)
    D.file_expect(None, prefix + 'var_log/exim/rejectlog', missing_ok=True)
    D.file_expect(cookie, prefix + 'var_mail/outbound-archive')

    print('pass')
    

## TODO: test appeared to pass evne when msg send clearly failed (panic log
## was non-empty and talked about msg being frozen)
    
if __name__ == "__main__":
  main()

