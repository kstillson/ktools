# Custom local build logic, invoked by d-build

# by default, continue with standard build logic once we're done here.
CONTINUE=1

# ---------- extern deps ----------

# Update deps from outside this directory branch.
source ../build-helper.sh
copy_and_check ../../pylib/tools/kmc.py files/usr/local/bin/kmc ugo+rx
rm -rf files/usr/lib/python3.9/site-packages
copy_and_check ../../pylib/kcore files/usr/lib/python3.9/site-packages ugo+rX 

# ---------- keymaster self-signed key/certificate pair ----------

# This script creates a self-signed certificate for the keymaster.
# It will attempt to preserve any already existing key/cert.

# Upon successful completion, private.d/ will contain server.crt and
# server.key.  The server.crt file will be copied to
# files/usr/local/bin, where it can be accessed by /usr/local/bin/kmc.
# The private key (private.d/server.key) is left there for use by
# the keymaster container in ../keymaster.

#
# WARNING
#
# Because keymaster is designed to auto-start, and assuming there's no
# meta-keymaster to help it do so, the private key is not easily password
# protected.  (It can't be protected by the keymaster GPG password, because
# TLS protection is needed for the km owner to provide the GPG password.)
# .gitignore will ignore the private.d directory, but if unencrypted backups
# of this directory are sent offsite, they could expose the TLS key,
# potentially making the keymaster server subject to man-in-the-middle
# attacks.
#
# TODO: consider encrypting the TLS key with a $PUID style secret.  This would
# complicate the build process, because the machine where container
# kcore-baseline is built might differ from the one where container keymaster is
# run, and the container for keymaster has probably not even been constructed
# yet, and if we need to do something like pre-generate that container's
# $PUID, then saving it for transfer to the keymaster container build
# undermines the whole effort.  This needs more thought.


CERT_SETTINGS="${CERT_SETTINGS:-private.d/cert-settings}"

PRIV_CERT_FILE="private.d/km.crt"
PRIV_KEY_FILE="private.d/km.key"

# -----

function generate_self_signed_cert() {

  if [[ ! -f $CERT_SETTINGS ]]; then
    cat << EOF
ERROR- you need a $CERT_SETTINGS file specific to your local details.
Please create kcore-baseline/$CERT_SETTINGS with something like this:

KM_HOSTNAME="keymaster"
SUBJECT="/C=US/ST=your-state/L=your-town/O=your-org-name"
EMAIL="admin-email-address@whatever.com"
DAYS="365"
EOF
    CONTINUE=0
    exit -3
  fi
  
  source $CERT_SETTINGS
  
  openssl req -x509 -newkey rsa:4096 -days $DAYS \
              -keyout $PRIV_KEY_FILE -out $PRIV_CERT_FILE -nodes \
  	    -subj "${SUBJECT}/CN=${KM_HOSTNAME}/emailAddress=${EMAIL}" \
  	    -addext "subjectAltName = DNS:${KM_HOSTNAME}"
  
  # Make sure permissions are right on those files.
  chmod go+r $PRIV_CERT_FILE
  chmod go-r $PRIV_KEY_FILE

  echo "Generated $PRIV_KEY_FILE and $PRIV_CERT_FILE"
}


# ----- create a TLS certificate if needed

if [[ ! -f $PRIV_KEY_FILE ]]; then
  generate_self_signed_cert
fi

copy_and_check $PRIV_CERT_FILE files/usr/local/bin/km.crt 644

