#!/usr/bin/python

import argparse, os, subprocess, sys, time

sys.path.append('/root/bin')
import d_lib


def main():
    ap = argparse.ArgumentParser(description='kmdock test')
    d_lib.add_testing_args(ap)
    args = ap.parse_args()
    name, ip, cow, dv = d_lib.launch_or_find_container(args, ['--extra-docker', '-e DATA=km-test.data.gpg'])
    if not cow or not ip: sys.exit('cannot find container %s' % name)

    if args.prod:
        sys.exit('cannot do in-place prod testing; test is destructive to its container.')

    # Try retrieving the test key before decrypting the database; should fail.
    d_lib.web_expect('not ready', ip, '/test', port=4443, https=True)

    # Decrypt the database with the test password, should say we're ok.
    d_lib.web_expect('ok', ip, '/', post_params={'password': 'ken123'}, port=4443, https=True)

    # Try retrieving the same test key.  Should work now.
    d_lib.web_expect('hithere', ip, '/test', port=4443, https=True)

    # Check the service health.
    d_lib.web_expect('ok', ip, '/healthz', port=4443, https=True)

    # On-demand clear of the decrypted database.
    d_lib.web_expect('cleared', ip, '/qqq', port=4443, https=True)

    # And now a health check should indicate "not ready".
    d_lib.web_expect('not ready', ip, '/test', port=4443, https=True)

    # Now lets re-start the database and try for test2, which should fail
    # and leave the system locked due to a source IP check failure.
    d_lib.web_expect('ok', ip, '/', post_params={'password': 'ken123'}, port=4443, https=True)
    d_lib.web_expect('ERR error performing host verification', ip, '/test2', port=4443, https=True)
    d_lib.web_expect('not ready', ip, '/test', port=4443, https=True)

    print('pass')
    

if __name__ == "__main__":
  main()

