# This file is designed to be included by Makefiles in the subdirectories.
#
# Supported meta-targets:  common_all, common_clean, common_test, common_install, common_uninstall, common_update
#
# Note: the "test" target is incomplete.  The caller is expected to provide
# a target for $(TEST_LOG), which isn't easily generalizable here.

# Non-standard targets:
# comp: compares files in the source directory to the install directory
# update: all, test, install, then git commit, remote pull, and remote push.


# ---------- primary input variables

# Input variables: at least one of these must be set, if you want the Makefile
# to do anything.  PY and SH targets should be specified without their
# extensions.  They'll be copied to the installtion directory with the
# extensions removed.  Plain targets are just copied to staging.  Custom
# targets need their own rules specified in the calling Makefile.
#
PY_TARGETS ?=
SH_TARGETS ?=
PLAIN_TARGETS ?=
CUSTOM_TARGETS ?=


# ---------- control variables
# (optionally overriden by the calling Makefile or from the environment.)

TEST_LOG ?= test.log
INSTALL_DIR ?= $$HOME/bin
GIT_BRANCH ?= master

# ---------- general internal settings

SHELL := /bin/bash


# ---------- directory constants for convenience of callers
#            (need to be updated with new Python versions)

PLIB := files/usr/lib/python3.11/site-packages


# ----------------------------------------
# Internal variables created from the inputs.

# Output variables: overall targets, plain, and in staging and target dirs.
PY_SOURCES := $(patsubst %,%.py,$(PY_TARGETS))
SH_SOURCES := $(patsubst %,%.sh,$(SH_TARGETS))
SOURCES := $(PY_SOURCES) $(SH_SOURCES) $(PLAIN_TARGETS)
TARGETS := $(PY_TARGETS) $(SH_TARGETS) $(PLAIN_TARGETS) $(CUSTOM_TARGETS)
INSTALL_TARGETS := $(patsubst %,$(INSTALL_DIR)/%,$(TARGETS))
INSTALL_PY_TARGETS := $(patsubst %,$(INSTALL_DIR)/%,$(PY_TARGETS))
INSTALL_SH_TARGETS := $(patsubst %,$(INSTALL_DIR)/%,$(SH_TARGETS))
INSTALL_PLAIN_TARGETS := $(patsubst %,$(INSTALL_DIR)/%,$(PLAIN_TARGETS))

COMP := $(wildcard ../et?/comp.py ../../et?/comp.py ../../../et?/comp.py)
ETC_DIR := $(shell dirname ${COMP})
PYLIB_DIR := $(wildcard ../pyli? ../../pyli? ../../../pyli?)

include $(ETC_DIR)/Makefile-colors


# ---------- default target

# This is generally a no-op; the targets are the source files, so they
# should already be there...

common_all: $(SOURCES)	 # nothing to do...


# ---------- basic copy patterns

$(INSTALL_DIR):
	mkdir -p $(INSTALL_DIR)

$(INSTALL_SH_TARGETS): $(INSTALL_DIR)/%: %.sh
	install $^ $@

$(INSTALL_PY_TARGETS): $(INSTALL_DIR)/%: %.py
	install $^ $@

$(INSTALL_PLAIN_TARGETS): $(INSTALL_DIR)/%: %
	install $^ $@


# ---------- standard targets

common_clean:
	rm -rf $(TEST_LOG) __pycache__ .pytest_cache *.pyc tests/__pycache__ tests/*.pyc || { if [[ "$$UID" != "0" ]]; then echo "some cleaning failed; files probably created by root during sudo of previous make.  retrying clean with sudo."; sudo -E $(MAKE) common_clean; fi; }

# Allow the patterns above to drive the install.
common_install: $(INSTALL_DIR) $(INSTALL_TARGETS)

common_uninstall:
	rm -f $(INSTALL_TARGETS)

# Calling Makefile needs to provide a recipe for $(TEST_LOG)
common_test: $(TEST_LOG)


# ---------- custom targets

common_update: $(SOURCES)
	$(MAKE) all test install

common_comp: FORCE
	@$(COMP) -b "$(INSTALL_DIR)" $(PLAIN_TARGETS) $(CUSTOM_TARGETS)
	@$(COMP) -b "$(INSTALL_DIR)" -L ".py/" $(PY_SOURCES)
	@$(COMP) -b "$(INSTALL_DIR)" -L ".sh/" $(SH_SOURCES)

check_kcore_installed:
	@python3 -c 'import kcore.common' || { printf "\n$(RED)pylib/kcore missing $(RESET) the pylib/kcore package must be installed for user '$$USER' before further packages can be built/tested.\n" && read -p 'install for you now? (y/n) ' ok && if [[ "$$ok" == "y" ]]; then $(MAKE) -C $(PYLIB_DIR) install; else exit 2; fi; }

FORCE: ;
