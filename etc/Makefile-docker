
SHELL := /bin/bash

# Note: several targets depend on container-infrastructure being INSTALLED
# before these targets can be BUILT.

# Furthermore, docker containers other than kds-baseline depend on
# kcore-baseline being INSTALLED (i.e. tagged "live") before they can be BUILT.

# ---------- control constants

DIRNAME ?= $(shell basename $(shell pwd))
DOCKER_EXEC ?= /usr/bin/docker
DOCKER_VOLS ?= /rw/dv
UID := $(shell id -u)

DBUILD_PUSH_OPTS ?= --tls-verify=false
DBUILD_PUSH_TO ?= localhost:5000
DBUILD_REPO ?= ktools


# ----- directory constants (need to be updated with Python versions)

PLIB := files/usr/lib/python3.10/site-packages
KCORE_DIR := $(PLIB)/kcore
KTOOLS_DIR := $(PLIB)/ktools


# ----- determine if we need sudo

NEED_SUDO := 1
ifeq ($(UID), 0)
  NEED_SUDO := 0
endif
ifeq ($(DOCKER_EXEC), podman)
  NEED_SUDO := 0
endif

# ----- determine docker uid namespace mapping offsets

DOCKER_MAP_UID ?= $(shell grep dmap: /etc/subuid | cut -d: -f2)
ifeq ($(DOCKER_MAP_UID),)
  DOCKER_MAP_UID := 0
endif

DOCKER_MAP_GID ?= $(shell grep dmap: /etc/subgid | cut -d: -f2)
ifeq ($(DOCKER_MAP_GID),)
  DOCKER_MAP_GID := 0
endif

ifneq ($(UID_SEARCH),)
  UID_INSIDE ?= $(shell grep $(UID_SEARCH) files/etc/passwd | cut -d: -f3)
  UID_OUTSIDE ?= $(shell echo "$(UID_INSIDE) + $(DOCKER_MAP_UID)" | bc)
endif
ifneq ($(GID_SEARCH),)
  GID_INSIDE ?= $(shell grep $(GID_SEARCH) files/etc/group | cut -d: -f3)
  GID_OUTSIDE ?= $(shell echo "$(GID_INSIDE) + $(DOCKER_MAP_GID)" | bc)
endif


# ---------- top level logic

docker-all: build-stamp

docker-clean:
	rm -rf *-stamp __pycache__ .pytest_cache

docker-install: docker-all docker-test install-stamp

docker-test: docker-all test-stamp

docker-uninstall:
	@echo ":uninstall target doesn't really make sense for docker containers."

docker-update: all docker-test docker-install

# force to :live without testing...
promote: install-stamp

# force push without testing or even checking if :live exists (i.e. probably want to "promote" first).
push: build-stamp
	$(DOCKER_EXEC) push $(DBUILD_PUSH_OPTS) $(DBUILD_REPO)/$(DIRNAME):live $(DBUILD_PUSH_TO)/$(DBUILD_REPO)/$(DIRNAME):live


# ---------- second & third level logic

build-stamp: ../kcore-baseline/baseline-stamp $(wildcard Buil* Dockerfile settings.yaml files/* files/*/* files/*/*/*)
	if [[ "$(NEED_SUDO)" == "1" ]]; then $(MAKE) build-stamp-sudo; else $(MAKE) build-stamp-run; fi

build-stamp-sudo:
	@echo "about to sudo for docker container d-build command.  Containers can only be built by root."
	exit 2
	sudo -E $(MAKE) build-stamp-run    # -E to preserve d-build environment vars

build-stamp-run:
	d-build
	touch build-stamp

install-stamp:
	if [[ "$(NEED_SUDO)" == "1" ]]; then $(MAKE) install-stamp-sudo; else $(MAKE) install-stamp-run; fi

install-stamp-sudo: build-stamp
	@echo "about to sudo for docker container d-build command.  Containers can only be built by root."
	sudo -E $(MAKE) install-stamp-run

install-stamp-run: build-stamp
	d-build -s
	touch install-stamp


test-stamp: $(wildcard Test* Buil* Dockerfile settings.yaml files/* files/*/* files/*/*/*)
	if [[ "$(NEED_SUDO)" == "1" ]]; then $(MAKE) test-stamp-sudo; else $(MAKE) test-stamp-run; fi

test-stamp-sudo:
	@echo "about to sudo for docker container Test command.  Testing involves starting up a container, which only root can do."
	sudo -E $(MAKE) test-stamp-run

test-stamp-run:
	pytest-3
	touch test-stamp


# ----------

../kcore-baseline/baseline-stamp:
	$(MAKE) -C ../kcore-baseline all
